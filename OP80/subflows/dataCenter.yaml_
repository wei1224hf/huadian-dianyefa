- id: 14fea2af83a06baf
  type: subflow
  name: dataCenter
  info: ''
  category: storage
  in:
    - x: 60
      'y': 80
      wires:
        - id: 5554a2a2f33a43c7
  out:
    - x: 1780
      'y': 300
      wires:
        - id: 4686358fbfc7c277
          port: 0
  env: []
  meta: {}
  color: '#DDAA99'
  icon: node-red/db.svg
- id: 03bccdf3ead313fd
  type: function
  z: 14fea2af83a06baf
  name: 读取所有设备
  func: |-
    msg.topic = "select * from device order by id";
    global.set("datas",{});
    global.set("devices",{});
    return msg;
  outputs: 1
  timeout: 0
  noerr: 0
  initialize: ''
  finalize: ''
  libs: []
  x: 260
  'y': 520
  wires:
    - []
- id: aa6877cafba9f14b
  type: function
  z: 14fea2af83a06baf
  name: 更新全局配置
  func: |-
    const arr = msg.payload;
    let config_nodes = global.get("config-nodes");

    for(let i=0;i<arr.length;i++){
        const t = arr[i];
        if(t.connect_type == 'modbus-server'){
            var obj =   {
                "id": "967785e4049706c4",
                "type": "modbus-client",
                "name": "6轴-84",
                "clienttype": "tcp",
                "bufferCommands": true,
                "stateLogEnabled": false,
                "queueLogEnabled": false,
                "failureLogEnabled": true,
                "tcpHost": "193.168.110.84",
                "tcpPort": "502",
                "tcpType": "DEFAULT",
                "serialPort": "/dev/ttyUSB",
                "serialType": "RTU-BUFFERD",
                "serialBaudrate": "9600",
                "serialDatabits": "8",
                "serialStopbits": "1",
                "serialParity": "none",
                "serialConnectionDelay": "100",
                "serialAsciiResponseStartDelimiter": "0x3A",
                "unit_id": "1",
                "commandDelay": "1",
                "clientTimeout": "1000",
                "reconnectOnTimeout": true,
                "reconnectTimeout": "2000",
                "parallelUnitIdsAllowed": true,
                "showErrors": false,
                "showWarnings": true,
                "showLogs": true
              };
            obj.name = t.name;
            obj.id = t.code;
            obj.tcpHost = t.connect_address.split(":")[0];
            obj.tcpPort = t.connect_address.split(":")[1];
            var isContains = false;
            for(var i2=0;i2<config_nodes.length;i2++){
                if(config_nodes[i2].id== t.code){
                    isContains = true;
                    break;
                }
            }
            if(!isContains){
                config_nodes.push(obj);
            }
        }
    }
    msg.payload = config_nodes;
    const type = global.get("config_flow_type");
    msg.filename = global.get("userDir") + "\\config-nodes."+type;
    return msg;
  outputs: 1
  timeout: 0
  noerr: 0
  initialize: ''
  finalize: ''
  libs: []
  x: 660
  'y': 600
  wires:
    - - 03cd708992d10877
- id: 957f201f498caea8
  type: file
  z: 14fea2af83a06baf
  name: ''
  filename: filename
  filenameType: msg
  appendNewline: false
  createDir: false
  overwriteFile: 'true'
  encoding: utf8
  x: 1140
  'y': 600
  wires:
    - []
- id: 1c9562554a62c0d0
  type: function
  z: 14fea2af83a06baf
  name: 读取设备的监听点位
  func: |
    const arr = msg.payload;
    let obj = {};
    for(let i2=0;i2<arr.length;i2++){
        obj[arr[i2].code] = arr[i2];
    }
    global.set("devices",obj);
    for(let i=0;i<arr.length;i++){
        const code = arr[i].code;
        let msg2 = {
            topic : "select * from device_datas where device = '"+code+"' order by mode, id;",
            code: code,
            rate: 300,
            idx: i
        };
        if(i==arr.length-1){
            msg2.end = true;
        }
        else{
            msg2.end = false;
        }
        node.send(msg2);
    }
  outputs: 1
  timeout: 0
  noerr: 0
  initialize: ''
  finalize: ''
  libs: []
  x: 680
  'y': 520
  wires:
    - - 64d37206bf381b47
- id: 64d37206bf381b47
  type: delay
  z: 14fea2af83a06baf
  name: ''
  pauseType: rate
  timeout: '5'
  timeoutUnits: seconds
  rate: '1'
  nbRateUnits: '1'
  rateUnits: second
  randomFirst: '1'
  randomLast: '5'
  randomUnits: seconds
  drop: false
  allowrate: true
  outputs: 1
  x: 825
  'y': 520
  wires:
    - []
  l: false
- id: db5514b7f5d78739
  type: function
  z: 14fea2af83a06baf
  name: 更新点位
  func: |-
    const arr = msg.payload;
    let obj = {};
    let monitors = global.get("datas");
    for(let i=0;i<arr.length;i++){
        obj[arr[i].code] = arr[i];
        monitors[arr[i].code] = obj[arr[i].code].value;
    }
    const idx = msg.idx;
    const code = msg.code;
    var devices = global.get("devices");
    devices[code].monitor = obj;

    return msg;
  outputs: 1
  timeout: 0
  noerr: 0
  initialize: ''
  finalize: ''
  libs: []
  x: 1100
  'y': 520
  wires:
    - - 19e23dcf92ebda54
- id: 19e23dcf92ebda54
  type: switch
  z: 14fea2af83a06baf
  name: ''
  property: end
  propertyType: msg
  rules:
    - t: 'true'
  checkall: 'true'
  repair: false
  outputs: 1
  x: 1270
  'y': 520
  wires:
    - - 0810b19c41f9896c
      - e3d7620f18ec3db1
- id: 0810b19c41f9896c
  type: switch
  z: 14fea2af83a06baf
  name: ''
  property: rewrite
  propertyType: global
  rules:
    - t: 'true'
  checkall: 'true'
  repair: false
  outputs: 1
  x: 1410
  'y': 520
  wires:
    - - 59f89ef1aef61e90
- id: 59f89ef1aef61e90
  type: function
  z: 14fea2af83a06baf
  name: 点位设置
  func: |-
    var json = [
        {
            "id": "Datas",
            "type": "tab",
            "label": "Datas",
            "disabled": false,
            "info": "",
            "env": []
        },
        {
            "id": "Datas_inject",
            "type": "inject",
            "z": "Datas",
            "name": "",
            "props": [
                {
                    "p": "payload"
                },
                {
                    "p": "topic",
                    "vt": "str"
                }
            ],
            "repeat": "",
            "crontab": "",
            "once": false,
            "onceDelay": "3",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "x": 100,
            "y": 160,
            "wires": [
                [
                ]
            ]
        }
    ];

    const devices = global.get("devices");
    let count = 0;
    for (let key in devices) {
        count++;
        const device = devices[key];
        const monitor = device['monitor'];
        if (device.connect_type == 'modbus-server') {
            const modbus_flex_getter = {
                "id": "modbus-flex-getter__" + device.code,
                "type": "modbus-flex-getter",
                "z": "Datas",
                "name": "getter_"+device.code,
                "showStatusActivities": false,
                "showErrors": false,
                "showWarnings": true,
                "logIOActivities": false,
                "server": device.code,
                "useIOFile": false,
                "ioFile": "",
                "useIOForPayload": false,
                "emptyMsgOnFail": false,
                "keepMsgProperties": false,
                "delayOnStart": false,
                "startDelayTime": "",
                "x": 450,
                "y": count * 220 - 50,
                "wires": [
                    [
                        "fun_receive__" + device.code,
                    ],
                    []
                ]
            };

            const modbus_flex_write = {
                "id": "modbus-flex-write__" + device.code,
                "type": "modbus-flex-write",
                "z": "Datas",
                "name": "",
                "showStatusActivities": false,
                "showErrors": false,
                "showWarnings": true,
                "server": device.code,
                "emptyMsgOnFail": false,
                "keepMsgProperties": false,
                "delayOnStart": false,
                "startDelayTime": "",
                "x": 450,
                "y": count * 220 - 150,
                "wires": [
                    [],
                    []
                ]
            };

            

            let strs = {
                funStr: "",
                funStr2: "",
                funReceiveStr: "",

                funStrW: "",
                funStrW2: "",            
            }

            let objSwitchRead = {
                "id": "switch__" + device.code,
                "type": "switch",
                "z": "Datas",
                "name": "",
                "property": "payload.end",
                "propertyType": "msg",
                "rules": [
                    {
                        "t": "true"
                    }
                ],
                "checkall": "true",
                "repair": false,
                "outputs": 1,
                "x": 450,
                "y": count * 220,
                "wires": [
                    [
                        device.code + "__read",
                    ]
                ]
            };

            let objSwitchWrite = {
                "id": "switch_write__" + device.code,
                "type": "switch",
                "z": "Datas",
                "name": "",
                "property": "payload.end",
                "propertyType": "msg",
                "rules": [
                    {
                        "t": "true"
                    }
                ],
                "checkall": "true",
                "repair": false,
                "outputs": 1,
                "x": 450,
                "y": count * 220 - 100,
                "wires": [
                    [
                        device.code + "__write",
                    ]
                ]
            };        

            let readLength = 0;
            let writeLength = 0;
            for (let key2 in monitor) {
                const point = monitor[key2];
                if (point.mode == 'read') {
                    readLength++;
                }
                else if (point.mode == 'write') {
                    writeLength++;
                }
            }
            let idx = 0;
            let idx2 = 0;
            for (let key2 in monitor) {
                
                const point = monitor[key2];
                if (point.mode == 'read') {
                    idx++;
                    if (idx == readLength) {
                        strs.funStr += "setTimeout(function(){ node.send({payload : {end:true,dev:'" + device.code + "', 'fc':3, 'unitid': 1, 'address':  " + point.address + " , 'quantity': 1 }}); \n"
                    }
                    else {
                        strs.funStr += "setTimeout(function(){ node.send({payload : {end:false,dev:'" + device.code + "', 'fc': 3, 'unitid': 1, 'address':  " + point.address + " , 'quantity': 1 }}); \n"
                    }
                    strs.funStr2 += "},80); \n"

                    strs.funReceiveStr = "" +
                        "let devices = global.get('devices'); \n" +
                        "let device = devices['" + device.code + "']; \n" +
                        "let monitor = device['monitor']; \n" +
                        "let datas = global.get('datas'); \n" +
                        "for(let key in monitor){ \n" +
                        "    let point = monitor[key]; \n" +
                        "    if( parseInt( point.address) == msg.modbusRequest.address){ \n" +
                        "        point.value = msg.payload[0]; \n" +
                        "        for(let key2 in datas){ \n" +
                        "            if(key2 == key){ \n" +
                        "                datas[key2] = point.value; \n" +
                        "                break; \n" +
                        "            } \n" +
                        "        } \n" +
                        "        break; \n" +
                        "    } \n" +
                        "} \n";
                }
                else if(point.mode == 'write'){
                    idx2++;
                    if (idx2 == writeLength) {
                        strs.funStrW += "setTimeout(function(){const datas = global.get('datas');let devices = global.get('devices');const val = datas['"+point.code+"']; devices['"+device.code+"'].monitor['"+point.code+"'].value = val; node.send({payload : {value:val,end:true,dev:'" + device.code + "', 'fc':6, 'unitid': 1, 'address':  " + point.address + " , 'quantity': 1 }}); \n"
                    }
                    else {
                        strs.funStrW += "setTimeout(function(){const datas = global.get('datas');const val = datas['"+point.code+"']; let devices = global.get('devices'); devices['"+device.code+"'].monitor['"+point.code+"'].value = val; node.send({payload : {value:val,end:false,dev:'" + device.code + "', 'fc': 6, 'unitid': 1, 'address':  " + point.address + " , 'quantity': 1 }}); \n"
                    }
                    strs.funStrW2 += "},80); \n"
                }
            }
            let ojbRead = {
                "id": device.code + "__read",
                "type": "function",
                "z": "Datas",
                "name": "read_"+device.code,
                "func": strs.funStr + strs.funStr2,
                "outputs": 1,
                "timeout": 0,
                "noerr": 0,
                "initialize": "",
                "finalize": "",
                "libs": [],
                "x": 250,
                "y": count * 220,
                "wires": [
                    [
                        "modbus-flex-getter__" + device.code,
                        "switch__" + device.code,
                    ]
                ]
            };

            let ojbWrite = {
                "id": device.code + "__write",
                "type": "function",
                "z": "Datas",
                "name": "write_"+device.code,
                "func": strs.funStrW + strs.funStrW2,
                "outputs": 1,
                "timeout": 0,
                "noerr": 0,
                "initialize": "",
                "finalize": "",
                "libs": [],
                "x": 250,
                "y": count * 220-100,
                "wires": [
                    [
                        "modbus-flex-write__" + device.code,
                        "switch_write__" + device.code,
                    ]
                ]
            };        

            let objReceive = {
                "id": "fun_receive__" + device.code,
                "type": "function",
                "z": "Datas",
                "name": "receive_"+device.code,
                "func": strs.funReceiveStr,
                "outputs": 1,
                "timeout": 0,
                "noerr": 0,
                "initialize": "",
                "finalize": "",
                "libs": [],
                "x": 830,
                "y": count * 220,
                "wires": [
                    []
                ]
            };
            json[1].wires[0].push(ojbRead.id);
            json[1].wires[0].push(ojbWrite.id);
            json.push(modbus_flex_getter);
            json.push(ojbRead);
            json.push(objSwitchRead);
            json.push(objReceive);
            json.push(modbus_flex_write);
            json.push(objSwitchWrite);
            json.push(ojbWrite);
            
        }
    }

    msg.payload = json;
    const type = global.get("config_flow_type");
    msg.filename = global.get("userDir") + "\\flows\\Datas."+type;
    return msg;
  outputs: 1
  timeout: 0
  noerr: 0
  initialize: ''
  finalize: ''
  libs: []
  x: 1320
  'y': 400
  wires:
    - - 66ac7673b0cac208
- id: 4686358fbfc7c277
  type: file
  z: 14fea2af83a06baf
  name: ''
  filename: filename
  filenameType: msg
  appendNewline: false
  createDir: false
  overwriteFile: 'true'
  encoding: none
  x: 1720
  'y': 400
  wires:
    - []
- id: b5849a7e2c2ca7d3
  type: function
  z: 14fea2af83a06baf
  name: 读全局变量
  func: |-
    const type = global.get("config_flow_type");
    msg.filename = global.get("userDir") + "\\config-nodes."+type;
    return msg;
  outputs: 1
  timeout: 0
  noerr: 0
  initialize: ''
  finalize: ''
  libs: []
  x: 210
  'y': 240
  wires:
    - - c71f4cbcdfac7dfc
- id: c71f4cbcdfac7dfc
  type: file in
  z: 14fea2af83a06baf
  name: ''
  filename: filename
  filenameType: msg
  format: utf8
  chunk: false
  sendError: false
  encoding: none
  allProps: false
  x: 380
  'y': 240
  wires:
    - - a91d4381fc0f37a5
- id: 1486b0fc2257aa06
  type: json
  z: 14fea2af83a06baf
  name: ''
  property: payload
  action: ''
  pretty: false
  x: 650
  'y': 220
  wires:
    - - e5f37db092a36b89
- id: e5f37db092a36b89
  type: change
  z: 14fea2af83a06baf
  name: ''
  rules:
    - t: set
      p: config-nodes
      pt: global
      to: payload
      tot: msg
  action: ''
  property: ''
  from: ''
  to: ''
  reg: false
  x: 850
  'y': 240
  wires:
    - - 03bccdf3ead313fd
- id: 5554a2a2f33a43c7
  type: function
  z: 14fea2af83a06baf
  name: 读流程后缀
  func: |-
    msg.filename = global.get("userDir") + "\\flow-manager-cfg.json";
    return msg;
  outputs: 1
  timeout: 0
  noerr: 0
  initialize: ''
  finalize: ''
  libs: []
  x: 350
  'y': 80
  wires:
    - - 8d56d67f7ffce819
- id: 8d56d67f7ffce819
  type: file in
  z: 14fea2af83a06baf
  name: ''
  filename: filename
  filenameType: msg
  format: utf8
  chunk: false
  sendError: false
  encoding: none
  allProps: false
  x: 520
  'y': 80
  wires:
    - - 6e436d7cbf717f52
- id: 6e436d7cbf717f52
  type: json
  z: 14fea2af83a06baf
  name: ''
  property: payload
  action: obj
  pretty: false
  x: 670
  'y': 80
  wires:
    - - 93a977d08b9482ac
- id: 93a977d08b9482ac
  type: change
  z: 14fea2af83a06baf
  name: ''
  rules:
    - t: set
      p: config_flow_type
      pt: global
      to: payload.fileFormat
      tot: msg
  action: ''
  property: ''
  from: ''
  to: ''
  reg: false
  x: 880
  'y': 80
  wires:
    - - b5849a7e2c2ca7d3
- id: a91d4381fc0f37a5
  type: switch
  z: 14fea2af83a06baf
  name: ''
  property: config_flow_type
  propertyType: global
  rules:
    - t: eq
      v: json
      vt: str
    - t: eq
      v: yaml
      vt: str
  checkall: 'true'
  repair: false
  outputs: 2
  x: 510
  'y': 240
  wires:
    - - 1486b0fc2257aa06
    - - e289599e0a85e00c
- id: e289599e0a85e00c
  type: yaml
  z: 14fea2af83a06baf
  property: payload
  name: ''
  x: 650
  'y': 260
  wires:
    - - e5f37db092a36b89
- id: 4829104f23139823
  type: json
  z: 14fea2af83a06baf
  name: ''
  property: payload
  action: ''
  pretty: false
  x: 970
  'y': 580
  wires:
    - - 957f201f498caea8
- id: 03cd708992d10877
  type: switch
  z: 14fea2af83a06baf
  name: ''
  property: config_flow_type
  propertyType: global
  rules:
    - t: eq
      v: json
      vt: str
    - t: eq
      v: yaml
      vt: str
  checkall: 'true'
  repair: false
  outputs: 2
  x: 830
  'y': 600
  wires:
    - - 4829104f23139823
    - - 156bbe6344c6d8ad
- id: 156bbe6344c6d8ad
  type: yaml
  z: 14fea2af83a06baf
  property: payload
  name: ''
  x: 970
  'y': 620
  wires:
    - - 957f201f498caea8
- id: caed6ee2ba3bfde5
  type: json
  z: 14fea2af83a06baf
  name: ''
  property: payload
  action: ''
  pretty: false
  x: 1590
  'y': 380
  wires:
    - - 4686358fbfc7c277
- id: 66ac7673b0cac208
  type: switch
  z: 14fea2af83a06baf
  name: ''
  property: config_flow_type
  propertyType: global
  rules:
    - t: eq
      v: json
      vt: str
    - t: eq
      v: yaml
      vt: str
  checkall: 'true'
  repair: false
  outputs: 2
  x: 1450
  'y': 400
  wires:
    - - caed6ee2ba3bfde5
    - - f1e6fd9ac1732ae7
- id: f1e6fd9ac1732ae7
  type: yaml
  z: 14fea2af83a06baf
  property: payload
  name: ''
  x: 1590
  'y': 420
  wires:
    - - 4686358fbfc7c277
- id: 06951cb4e0af4735
  type: function
  z: 14fea2af83a06baf
  name: 更新点位
  func: |-
    global.set("config_flow_type",undefined);
    global.set("config-nodes",undefined);
  outputs: 1
  timeout: 0
  noerr: 0
  initialize: ''
  finalize: ''
  libs: []
  x: 1380
  'y': 680
  wires:
    - []
- id: e3d7620f18ec3db1
  type: delay
  z: 14fea2af83a06baf
  name: ''
  pauseType: delay
  timeout: '5'
  timeoutUnits: seconds
  rate: '1'
  nbRateUnits: '1'
  rateUnits: second
  randomFirst: '1'
  randomLast: '5'
  randomUnits: seconds
  drop: false
  allowrate: false
  outputs: 1
  x: 1315
  'y': 620
  wires:
    - - 06951cb4e0af4735
  l: false
