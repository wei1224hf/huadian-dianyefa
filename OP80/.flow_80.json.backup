[
    {
        "id": "Datas",
        "type": "tab",
        "label": "Datas",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "99911e376297d5a2",
        "type": "tab",
        "label": "流程 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "54f147592a602955",
        "type": "subflow",
        "name": "6axes",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "95572ea14ecc22a6"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 680,
                "y": 140,
                "wires": [
                    {
                        "id": "c9d15a68ec85cae6",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "6axes",
                "type": "num",
                "value": "0"
            }
        ],
        "meta": {},
        "color": "#E2D96E",
        "icon": "font-awesome/fa-puzzle-piece",
        "status": {
            "x": 500,
            "y": 340,
            "wires": [
                {
                    "id": "68d49e9604c8a67f",
                    "port": 0
                },
                {
                    "id": "ad5ef292ac14a07a",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "8fe3e255cbd378f2",
        "type": "subflow",
        "name": "FanZai",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 160,
                "y": 120,
                "wires": [
                    {
                        "id": "e13a72f090db0b1f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 770,
                "y": 210,
                "wires": [
                    {
                        "id": "3c3144c82ed350c6",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "FanZai",
                "type": "num",
                "value": "0"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 510,
            "y": 410,
            "wires": [
                {
                    "id": "d2b17a75cd2d34c8",
                    "port": 0
                },
                {
                    "id": "0e2f49849c54aedf",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "sqlitedb_id",
        "type": "sqlitedb",
        "db": "datas.db",
        "mode": "RWC"
    },
    {
        "id": "ext-controller",
        "type": "modbus-client",
        "name": "OP40-泛在控制器",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "localhost",
        "tcpPort": "503",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "scara-left",
        "type": "modbus-client",
        "name": "OP40-左scara",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "localhost",
        "tcpPort": "504",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "scara-right",
        "type": "modbus-client",
        "name": "OP40-右scara",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "localhost",
        "tcpPort": "505",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "virtual-modbus",
        "type": "modbus-client",
        "name": "OP40-虚拟modbus",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "localhost",
        "tcpPort": "506",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "c2626d94b9292dc2",
        "type": "trigger",
        "z": "54f147592a602955",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "num",
        "op2type": "str",
        "duration": "-250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 365,
        "y": 140,
        "wires": [
            [
                "23d43301c92f0e0e",
                "68d49e9604c8a67f"
            ]
        ],
        "l": false
    },
    {
        "id": "e8f0b18770c8c926",
        "type": "delay",
        "z": "54f147592a602955",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 365,
        "y": 100,
        "wires": [
            [
                "850bbfbbd321bb30"
            ]
        ],
        "l": false
    },
    {
        "id": "23d43301c92f0e0e",
        "type": "function",
        "z": "54f147592a602955",
        "name": "函数 32",
        "func": "const IO = global.get(\"IO_80\");\nif (IO.AI_6axes.response == (IO.AO_6axes.request_+100)){\n    return {reset:1};\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 425,
        "y": 140,
        "wires": [
            [
                "c2626d94b9292dc2",
                "c9d15a68ec85cae6"
            ]
        ],
        "l": false
    },
    {
        "id": "c9d15a68ec85cae6",
        "type": "function",
        "z": "54f147592a602955",
        "name": "函数 33",
        "func": "return {payload: 1}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 505,
        "y": 140,
        "wires": [
            [
                "ad5ef292ac14a07a"
            ]
        ],
        "l": false
    },
    {
        "id": "95572ea14ecc22a6",
        "type": "function",
        "z": "54f147592a602955",
        "name": "函数 34",
        "func": "var IO = global.get(\"IO_80\");\nIO.AO_6axes.request = env.get(\"6axes\");\nIO.AO_6axes.request_ = env.get(\"6axes\");\nflow.set(\"c1\",1);\nreturn {payload: 1};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 140,
        "wires": [
            [
                "c2626d94b9292dc2",
                "e8f0b18770c8c926"
            ]
        ]
    },
    {
        "id": "850bbfbbd321bb30",
        "type": "function",
        "z": "54f147592a602955",
        "name": "函数 35",
        "func": "var IO = global.get(\"IO_80\");\nIO.AO_6axes.request = 0;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "68d49e9604c8a67f",
        "type": "function",
        "z": "54f147592a602955",
        "name": "函数 36",
        "func": "var c1 = flow.get(\"c1\");\nconst IO = global.get(\"IO_80\");\nmsg.payload = c1 + \":\" + IO.AO_6axes.request_;\nflow.set(\"c1\",c1+1);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "ad5ef292ac14a07a",
        "type": "function",
        "z": "54f147592a602955",
        "name": "函数 37",
        "func": "msg.payload = \"DONE\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "512a1af1cfe67333",
        "type": "trigger",
        "z": "8fe3e255cbd378f2",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "num",
        "op2type": "str",
        "duration": "-250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 425,
        "y": 210,
        "wires": [
            [
                "668f091b15c8295f",
                "d2b17a75cd2d34c8"
            ]
        ],
        "l": false
    },
    {
        "id": "6c596065c6e35277",
        "type": "delay",
        "z": "8fe3e255cbd378f2",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 425,
        "y": 170,
        "wires": [
            [
                "c10e076ff0914977"
            ]
        ],
        "l": false
    },
    {
        "id": "668f091b15c8295f",
        "type": "function",
        "z": "8fe3e255cbd378f2",
        "name": "函数 26",
        "func": "const IO = global.get(\"IO_80\");\nif (IO.AI.response == (IO.AO.request_+100)){\n    return {reset:1};\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 485,
        "y": 210,
        "wires": [
            [
                "512a1af1cfe67333",
                "3c3144c82ed350c6"
            ]
        ],
        "l": false
    },
    {
        "id": "3c3144c82ed350c6",
        "type": "function",
        "z": "8fe3e255cbd378f2",
        "name": "函数 27",
        "func": "return {payload: 1}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 565,
        "y": 210,
        "wires": [
            [
                "0e2f49849c54aedf"
            ]
        ],
        "l": false
    },
    {
        "id": "e13a72f090db0b1f",
        "type": "function",
        "z": "8fe3e255cbd378f2",
        "name": "函数 28",
        "func": "var IO = global.get(\"IO_80\");\nIO.AO.request = env.get(\"FanZai\");\nIO.AO.request_ = env.get(\"FanZai\");\nflow.set(\"c3\",1);\nreturn {payload: 1};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 210,
        "wires": [
            [
                "512a1af1cfe67333",
                "6c596065c6e35277"
            ]
        ]
    },
    {
        "id": "c10e076ff0914977",
        "type": "function",
        "z": "8fe3e255cbd378f2",
        "name": "函数 29",
        "func": "var IO = global.get(\"IO_80\");\nIO.AO.request = 0;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 170,
        "wires": [
            []
        ]
    },
    {
        "id": "d2b17a75cd2d34c8",
        "type": "function",
        "z": "8fe3e255cbd378f2",
        "name": "函数 30",
        "func": "var c3 = flow.get(\"c3\");\nconst IO = global.get(\"IO_80\");\nmsg.payload = c3 + \":\" + IO.AO.request_;\nflow.set(\"c3\",c3+1);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 350,
        "wires": [
            []
        ]
    },
    {
        "id": "0e2f49849c54aedf",
        "type": "function",
        "z": "8fe3e255cbd378f2",
        "name": "函数 31",
        "func": "msg.payload = \"DONE\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 290,
        "wires": [
            []
        ]
    },
    {
        "id": "data_center_start",
        "type": "function",
        "z": "Datas",
        "name": "start",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 110,
        "y": 60,
        "wires": [
            [
                "ext-controller__read",
                "ext-controller__write",
                "scara-left__read",
                "scara-left__write",
                "scara-right__read",
                "scara-right__write",
                "virtual-modbus__read",
                "virtual-modbus__write"
            ]
        ]
    },
    {
        "id": "Datas_inject",
        "type": "inject",
        "z": "Datas",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "3",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 160,
        "wires": [
            [
                "data_center_start"
            ]
        ]
    },
    {
        "id": "modbus-flex-getter__ext-controller",
        "type": "modbus-flex-getter",
        "z": "Datas",
        "name": "getter_ext-controller",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "ext-controller",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 450,
        "y": 170,
        "wires": [
            [
                "fun_receive__ext-controller"
            ],
            []
        ]
    },
    {
        "id": "ext-controller__read",
        "type": "function",
        "z": "Datas",
        "name": "read_ext-controller",
        "func": "setTimeout(function(){ node.send({payload : {end:false,dev:'ext-controller', 'fc':3, 'unitid': 1, 'address':  0 , 'quantity': 2 }}); \nsetTimeout(function(){ node.send({payload : {end:true,dev:'ext-controller', 'fc':3, 'unitid': 1, 'address':  3 , 'quantity': 4 }}); \n},80); \n},80); \n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 220,
        "wires": [
            [
                "modbus-flex-getter__ext-controller",
                "switch__ext-controller"
            ]
        ]
    },
    {
        "id": "switch__ext-controller",
        "type": "switch",
        "z": "Datas",
        "name": "",
        "property": "payload.end",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 450,
        "y": 220,
        "wires": [
            [
                "ext-controller__read"
            ]
        ]
    },
    {
        "id": "fun_receive__ext-controller",
        "type": "function",
        "z": "Datas",
        "name": "receive_ext-controller",
        "func": "let devices = global.get('devices'); \nlet device = devices['ext-controller']; \nlet monitor = device['monitor']; \nlet datas = global.get('datas'); \n\tlet vals = msg.payload;\t\t\t\t\t\t\t\n\tfor(let i=0;i<vals.length;i++){\t\t\t\t\t\t\t\n\t\tlet address = msg.modbusRequest.address + i;\t\t\t\t\t\t\n\t\tfor(let key in monitor){ \t\t\t\t\t\t\n\t\t\tlet point = monitor[key]; \t\t\t\t\t\n\t\t\tif( parseInt( point.address) == address){ \t\t\t\t\t\n\t\t\t\tpoint.value = msg.payload[i]; \t\t\t\t\n\t\t\t\tfor(let key2 in datas){ \t\t\t\t\n\t\t\t\t\tif(key2 == key){ \t\t\t\n\t\t\t\t\t\tdatas[key2] = point.value; \t\t\n\t\t\t\t\t\tbreak; \t\t\n\t\t\t\t\t} \t\t\t\n\t\t\t\t} \t\t\t\t\n\t\t\t\tbreak; \t\t\t\t\n\t\t\t} \t\t\t\t\t\n\t\t} \t\t\t\t\t\t\n\t}\t\t\t\t\t\t\t\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "modbus-flex-write__ext-controller",
        "type": "modbus-flex-write",
        "z": "Datas",
        "name": "write_ext-controller",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "server": "ext-controller",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 450,
        "y": 70,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "switch_write__ext-controller",
        "type": "switch",
        "z": "Datas",
        "name": "",
        "property": "payload.end",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 450,
        "y": 120,
        "wires": [
            [
                "ext-controller__write"
            ]
        ]
    },
    {
        "id": "ext-controller__write",
        "type": "function",
        "z": "Datas",
        "name": "write_ext-controller",
        "func": "setTimeout(function(){const datas = global.get('datas');const val = [datas['request']]; let devices = global.get('devices'); devices['ext-controller'].monitor['request'].value = datas['request'];\n node.send({payload : {value:val,end:false,dev:'ext-controller', 'fc': 16, 'unitid': 1, 'address':  2 , 'quantity': 1 }}); \nsetTimeout(function(){const datas = global.get('datas');const val = [datas['tray_in_left'],datas['tray_out_left'],datas['tray_in_right'],datas['tray_out_right']]; let devices = global.get('devices'); devices['ext-controller'].monitor['tray_in_left'].value = datas['tray_in_left'];\ndevices['ext-controller'].monitor['tray_out_left'].value = datas['tray_out_left'];\ndevices['ext-controller'].monitor['tray_in_right'].value = datas['tray_in_right'];\ndevices['ext-controller'].monitor['tray_out_right'].value = datas['tray_out_right'];\n node.send({payload : {value:val,end:true,dev:'ext-controller', 'fc': 16, 'unitid': 1, 'address':  7 , 'quantity': 4 }}); \n},80); \n},80); \n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 120,
        "wires": [
            [
                "modbus-flex-write__ext-controller",
                "switch_write__ext-controller"
            ]
        ]
    },
    {
        "id": "modbus-flex-getter__scara-left",
        "type": "modbus-flex-getter",
        "z": "Datas",
        "name": "getter_scara-left",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "scara-left",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 450,
        "y": 390,
        "wires": [
            [
                "fun_receive__scara-left"
            ],
            []
        ]
    },
    {
        "id": "scara-left__read",
        "type": "function",
        "z": "Datas",
        "name": "read_scara-left",
        "func": "setTimeout(function(){ node.send({payload : {end:false,dev:'scara-left', 'fc':3, 'unitid': 1, 'address':  5 , 'quantity': 2 }}); \nsetTimeout(function(){ node.send({payload : {end:true,dev:'scara-left', 'fc':3, 'unitid': 1, 'address':  8 , 'quantity': 1 }}); \n},80); \n},80); \n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 440,
        "wires": [
            [
                "modbus-flex-getter__scara-left",
                "switch__scara-left"
            ]
        ]
    },
    {
        "id": "switch__scara-left",
        "type": "switch",
        "z": "Datas",
        "name": "",
        "property": "payload.end",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 450,
        "y": 440,
        "wires": [
            [
                "scara-left__read"
            ]
        ]
    },
    {
        "id": "fun_receive__scara-left",
        "type": "function",
        "z": "Datas",
        "name": "receive_scara-left",
        "func": "let devices = global.get('devices'); \nlet device = devices['scara-left']; \nlet monitor = device['monitor']; \nlet datas = global.get('datas'); \n\tlet vals = msg.payload;\t\t\t\t\t\t\t\n\tfor(let i=0;i<vals.length;i++){\t\t\t\t\t\t\t\n\t\tlet address = msg.modbusRequest.address + i;\t\t\t\t\t\t\n\t\tfor(let key in monitor){ \t\t\t\t\t\t\n\t\t\tlet point = monitor[key]; \t\t\t\t\t\n\t\t\tif( parseInt( point.address) == address){ \t\t\t\t\t\n\t\t\t\tpoint.value = msg.payload[i]; \t\t\t\t\n\t\t\t\tfor(let key2 in datas){ \t\t\t\t\n\t\t\t\t\tif(key2 == key){ \t\t\t\n\t\t\t\t\t\tdatas[key2] = point.value; \t\t\n\t\t\t\t\t\tbreak; \t\t\n\t\t\t\t\t} \t\t\t\n\t\t\t\t} \t\t\t\t\n\t\t\t\tbreak; \t\t\t\t\n\t\t\t} \t\t\t\t\t\n\t\t} \t\t\t\t\t\t\n\t}\t\t\t\t\t\t\t\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "modbus-flex-write__scara-left",
        "type": "modbus-flex-write",
        "z": "Datas",
        "name": "write_scara-left",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "server": "scara-left",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 450,
        "y": 290,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "switch_write__scara-left",
        "type": "switch",
        "z": "Datas",
        "name": "",
        "property": "payload.end",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 450,
        "y": 340,
        "wires": [
            [
                "scara-left__write"
            ]
        ]
    },
    {
        "id": "scara-left__write",
        "type": "function",
        "z": "Datas",
        "name": "write_scara-left",
        "func": "setTimeout(function(){const datas = global.get('datas');const val = [datas['idx_in_left'],datas['idx_out_left'],datas['material_left'],datas['trash_left']]; let devices = global.get('devices'); devices['scara-left'].monitor['idx_in_left'].value = datas['idx_in_left'];\ndevices['scara-left'].monitor['idx_out_left'].value = datas['idx_out_left'];\ndevices['scara-left'].monitor['material_left'].value = datas['material_left'];\ndevices['scara-left'].monitor['trash_left'].value = datas['trash_left'];\n node.send({payload : {value:val,end:false,dev:'scara-left', 'fc': 16, 'unitid': 1, 'address':  1 , 'quantity': 4 }}); \nsetTimeout(function(){const datas = global.get('datas');const val = [datas['request_left']]; let devices = global.get('devices'); devices['scara-left'].monitor['request_left'].value = datas['request_left'];\n node.send({payload : {value:val,end:true,dev:'scara-left', 'fc': 16, 'unitid': 1, 'address':  7 , 'quantity': 1 }}); \n},80); \n},80); \n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 340,
        "wires": [
            [
                "modbus-flex-write__scara-left",
                "switch_write__scara-left"
            ]
        ]
    },
    {
        "id": "modbus-flex-getter__scara-right",
        "type": "modbus-flex-getter",
        "z": "Datas",
        "name": "getter_scara-right",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "scara-right",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 450,
        "y": 610,
        "wires": [
            [
                "fun_receive__scara-right"
            ],
            []
        ]
    },
    {
        "id": "scara-right__read",
        "type": "function",
        "z": "Datas",
        "name": "read_scara-right",
        "func": "setTimeout(function(){ node.send({payload : {end:false,dev:'scara-right', 'fc':3, 'unitid': 1, 'address':  5 , 'quantity': 2 }}); \nsetTimeout(function(){ node.send({payload : {end:true,dev:'scara-right', 'fc':3, 'unitid': 1, 'address':  8 , 'quantity': 1 }}); \n},80); \n},80); \n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 660,
        "wires": [
            [
                "modbus-flex-getter__scara-right",
                "switch__scara-right"
            ]
        ]
    },
    {
        "id": "switch__scara-right",
        "type": "switch",
        "z": "Datas",
        "name": "",
        "property": "payload.end",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 450,
        "y": 660,
        "wires": [
            [
                "scara-right__read"
            ]
        ]
    },
    {
        "id": "fun_receive__scara-right",
        "type": "function",
        "z": "Datas",
        "name": "receive_scara-right",
        "func": "let devices = global.get('devices'); \nlet device = devices['scara-right']; \nlet monitor = device['monitor']; \nlet datas = global.get('datas'); \n\tlet vals = msg.payload;\t\t\t\t\t\t\t\n\tfor(let i=0;i<vals.length;i++){\t\t\t\t\t\t\t\n\t\tlet address = msg.modbusRequest.address + i;\t\t\t\t\t\t\n\t\tfor(let key in monitor){ \t\t\t\t\t\t\n\t\t\tlet point = monitor[key]; \t\t\t\t\t\n\t\t\tif( parseInt( point.address) == address){ \t\t\t\t\t\n\t\t\t\tpoint.value = msg.payload[i]; \t\t\t\t\n\t\t\t\tfor(let key2 in datas){ \t\t\t\t\n\t\t\t\t\tif(key2 == key){ \t\t\t\n\t\t\t\t\t\tdatas[key2] = point.value; \t\t\n\t\t\t\t\t\tbreak; \t\t\n\t\t\t\t\t} \t\t\t\n\t\t\t\t} \t\t\t\t\n\t\t\t\tbreak; \t\t\t\t\n\t\t\t} \t\t\t\t\t\n\t\t} \t\t\t\t\t\t\n\t}\t\t\t\t\t\t\t\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "modbus-flex-write__scara-right",
        "type": "modbus-flex-write",
        "z": "Datas",
        "name": "write_scara-right",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "server": "scara-right",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 450,
        "y": 510,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "switch_write__scara-right",
        "type": "switch",
        "z": "Datas",
        "name": "",
        "property": "payload.end",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 450,
        "y": 560,
        "wires": [
            [
                "scara-right__write"
            ]
        ]
    },
    {
        "id": "scara-right__write",
        "type": "function",
        "z": "Datas",
        "name": "write_scara-right",
        "func": "setTimeout(function(){const datas = global.get('datas');const val = [datas['idx_in_right'],datas['idx_out_right'],datas['material_right'],datas['trash_right']]; let devices = global.get('devices'); devices['scara-right'].monitor['idx_in_right'].value = datas['idx_in_right'];\ndevices['scara-right'].monitor['idx_out_right'].value = datas['idx_out_right'];\ndevices['scara-right'].monitor['material_right'].value = datas['material_right'];\ndevices['scara-right'].monitor['trash_right'].value = datas['trash_right'];\n node.send({payload : {value:val,end:false,dev:'scara-right', 'fc': 16, 'unitid': 1, 'address':  1 , 'quantity': 4 }}); \nsetTimeout(function(){const datas = global.get('datas');const val = [datas['request_right']]; let devices = global.get('devices'); devices['scara-right'].monitor['request_right'].value = datas['request_right'];\n node.send({payload : {value:val,end:true,dev:'scara-right', 'fc': 16, 'unitid': 1, 'address':  7 , 'quantity': 1 }}); \n},80); \n},80); \n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 560,
        "wires": [
            [
                "modbus-flex-write__scara-right",
                "switch_write__scara-right"
            ]
        ]
    },
    {
        "id": "modbus-flex-getter__virtual-modbus",
        "type": "modbus-flex-getter",
        "z": "Datas",
        "name": "getter_virtual-modbus",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "virtual-modbus",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 450,
        "y": 830,
        "wires": [
            [
                "fun_receive__virtual-modbus"
            ],
            []
        ]
    },
    {
        "id": "virtual-modbus__read",
        "type": "function",
        "z": "Datas",
        "name": "read_virtual-modbus",
        "func": "",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 880,
        "wires": [
            [
                "modbus-flex-getter__virtual-modbus",
                "switch__virtual-modbus"
            ]
        ]
    },
    {
        "id": "switch__virtual-modbus",
        "type": "switch",
        "z": "Datas",
        "name": "",
        "property": "payload.end",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 450,
        "y": 880,
        "wires": [
            [
                "virtual-modbus__read"
            ]
        ]
    },
    {
        "id": "fun_receive__virtual-modbus",
        "type": "function",
        "z": "Datas",
        "name": "receive_virtual-modbus",
        "func": "let devices = global.get('devices'); \nlet device = devices['virtual-modbus']; \nlet monitor = device['monitor']; \nlet datas = global.get('datas'); \n\tlet vals = msg.payload;\t\t\t\t\t\t\t\n\tfor(let i=0;i<vals.length;i++){\t\t\t\t\t\t\t\n\t\tlet address = msg.modbusRequest.address + i;\t\t\t\t\t\t\n\t\tfor(let key in monitor){ \t\t\t\t\t\t\n\t\t\tlet point = monitor[key]; \t\t\t\t\t\n\t\t\tif( parseInt( point.address) == address){ \t\t\t\t\t\n\t\t\t\tpoint.value = msg.payload[i]; \t\t\t\t\n\t\t\t\tfor(let key2 in datas){ \t\t\t\t\n\t\t\t\t\tif(key2 == key){ \t\t\t\n\t\t\t\t\t\tdatas[key2] = point.value; \t\t\n\t\t\t\t\t\tbreak; \t\t\n\t\t\t\t\t} \t\t\t\n\t\t\t\t} \t\t\t\t\n\t\t\t\tbreak; \t\t\t\t\n\t\t\t} \t\t\t\t\t\n\t\t} \t\t\t\t\t\t\n\t}\t\t\t\t\t\t\t\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "modbus-flex-write__virtual-modbus",
        "type": "modbus-flex-write",
        "z": "Datas",
        "name": "write_virtual-modbus",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "server": "virtual-modbus",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 450,
        "y": 730,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "switch_write__virtual-modbus",
        "type": "switch",
        "z": "Datas",
        "name": "",
        "property": "payload.end",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 450,
        "y": 780,
        "wires": [
            [
                "virtual-modbus__write"
            ]
        ]
    },
    {
        "id": "virtual-modbus__write",
        "type": "function",
        "z": "Datas",
        "name": "write_virtual-modbus",
        "func": "",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 780,
        "wires": [
            [
                "modbus-flex-write__virtual-modbus",
                "switch_write__virtual-modbus"
            ]
        ]
    },
    {
        "id": "3f56efd5826c874c",
        "type": "inject",
        "z": "99911e376297d5a2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 350,
        "y": 360,
        "wires": [
            [
                "22116b749f3dcf96"
            ]
        ]
    },
    {
        "id": "22116b749f3dcf96",
        "type": "change",
        "z": "99911e376297d5a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "rewrite",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "a93f58fb2c6ca1c6",
        "type": "data-center",
        "z": "99911e376297d5a2",
        "name": "",
        "x": 410,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "a644370031299434",
        "type": "inject",
        "z": "99911e376297d5a2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 400,
        "wires": [
            [
                "a93f58fb2c6ca1c6"
            ]
        ]
    },
    {
        "id": "6899d336be9e2a24",
        "type": "modbus-server",
        "z": "99911e376297d5a2",
        "name": "",
        "logEnabled": false,
        "hostname": "0.0.0.0",
        "serverPort": "503",
        "responseDelay": 100,
        "delayUnit": "ms",
        "coilsBufferSize": 10000,
        "holdingBufferSize": 10000,
        "inputBufferSize": 10000,
        "discreteBufferSize": 10000,
        "showErrors": false,
        "x": 400,
        "y": 660,
        "wires": [
            [],
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "7a8e804c8a1ea826",
        "type": "modbus-server",
        "z": "99911e376297d5a2",
        "name": "",
        "logEnabled": false,
        "hostname": "0.0.0.0",
        "serverPort": "504",
        "responseDelay": 100,
        "delayUnit": "ms",
        "coilsBufferSize": 10000,
        "holdingBufferSize": 10000,
        "inputBufferSize": 10000,
        "discreteBufferSize": 10000,
        "showErrors": false,
        "x": 400,
        "y": 740,
        "wires": [
            [],
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "1d9b7a4c4ca0ec07",
        "type": "modbus-server",
        "z": "99911e376297d5a2",
        "name": "",
        "logEnabled": false,
        "hostname": "0.0.0.0",
        "serverPort": "505",
        "responseDelay": 100,
        "delayUnit": "ms",
        "coilsBufferSize": 10000,
        "holdingBufferSize": 10000,
        "inputBufferSize": 10000,
        "discreteBufferSize": 10000,
        "showErrors": false,
        "x": 400,
        "y": 820,
        "wires": [
            [],
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "53c3b9c589d16a1b",
        "type": "modbus-server",
        "z": "99911e376297d5a2",
        "name": "",
        "logEnabled": false,
        "hostname": "0.0.0.0",
        "serverPort": "506",
        "responseDelay": 100,
        "delayUnit": "ms",
        "coilsBufferSize": 10000,
        "holdingBufferSize": 10000,
        "inputBufferSize": 10000,
        "discreteBufferSize": 10000,
        "showErrors": false,
        "x": 400,
        "y": 900,
        "wires": [
            [],
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "75dc890d57c1098b",
        "type": "inject",
        "z": "99911e376297d5a2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 350,
        "y": 160,
        "wires": [
            [
                "56a7c8606362fa0f"
            ]
        ]
    },
    {
        "id": "56a7c8606362fa0f",
        "type": "change",
        "z": "99911e376297d5a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "datas.tray_out_left",
                "pt": "global",
                "to": "997",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "9633c5e31eed0e43",
        "type": "inject",
        "z": "99911e376297d5a2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 350,
        "y": 120,
        "wires": [
            [
                "12375d9da4457d51"
            ]
        ]
    },
    {
        "id": "12375d9da4457d51",
        "type": "change",
        "z": "99911e376297d5a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "datas.tray_in_left",
                "pt": "global",
                "to": "998",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "48e2c1052d8c6ffc",
        "type": "inject",
        "z": "99911e376297d5a2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 350,
        "y": 80,
        "wires": [
            [
                "ea1a62cad4b11c31"
            ]
        ]
    },
    {
        "id": "ea1a62cad4b11c31",
        "type": "change",
        "z": "99911e376297d5a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "datas.request",
                "pt": "global",
                "to": "999",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "6efc5b7d7464c2c0",
        "type": "inject",
        "z": "99911e376297d5a2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 350,
        "y": 200,
        "wires": [
            [
                "92cbbbfb34ff8c79"
            ]
        ]
    },
    {
        "id": "92cbbbfb34ff8c79",
        "type": "change",
        "z": "99911e376297d5a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "datas.tray_in_right",
                "pt": "global",
                "to": "996",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "f439c06804980bda",
        "type": "inject",
        "z": "99911e376297d5a2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 350,
        "y": 240,
        "wires": [
            [
                "64f4536d6273e851"
            ]
        ]
    },
    {
        "id": "64f4536d6273e851",
        "type": "change",
        "z": "99911e376297d5a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "datas.tray_out_right",
                "pt": "global",
                "to": "995",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "62177679fb8172f3",
        "type": "inject",
        "z": "99911e376297d5a2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 810,
        "y": 160,
        "wires": [
            [
                "a3f657f97baad122"
            ]
        ]
    },
    {
        "id": "a3f657f97baad122",
        "type": "change",
        "z": "99911e376297d5a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "datas.material_right",
                "pt": "global",
                "to": "997",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "5063c364cfd09b17",
        "type": "inject",
        "z": "99911e376297d5a2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 810,
        "y": 120,
        "wires": [
            [
                "9306fd1582411463"
            ]
        ]
    },
    {
        "id": "9306fd1582411463",
        "type": "change",
        "z": "99911e376297d5a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "datas.idx_out_right",
                "pt": "global",
                "to": "998",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "2bc2995e54260bd9",
        "type": "inject",
        "z": "99911e376297d5a2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 810,
        "y": 80,
        "wires": [
            [
                "a1ae372d563dbc4b"
            ]
        ]
    },
    {
        "id": "a1ae372d563dbc4b",
        "type": "change",
        "z": "99911e376297d5a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "datas.idx_in_right",
                "pt": "global",
                "to": "999",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "b65fc8e4aac03f2a",
        "type": "inject",
        "z": "99911e376297d5a2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 810,
        "y": 200,
        "wires": [
            [
                "f5bd4d4c6cae053b"
            ]
        ]
    },
    {
        "id": "f5bd4d4c6cae053b",
        "type": "change",
        "z": "99911e376297d5a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "datas.trash_right",
                "pt": "global",
                "to": "996",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "5d180ff5aecebeda",
        "type": "inject",
        "z": "99911e376297d5a2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 810,
        "y": 240,
        "wires": [
            [
                "feb0488cd288b239"
            ]
        ]
    },
    {
        "id": "feb0488cd288b239",
        "type": "change",
        "z": "99911e376297d5a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "datas.request_right",
                "pt": "global",
                "to": "995",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 240,
        "wires": [
            []
        ]
    }
]