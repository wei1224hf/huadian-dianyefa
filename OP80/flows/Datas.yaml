- id: Datas
  type: tab
  label: Datas
  disabled: false
  info: ''
  env: []
- id: data_center_start
  type: function
  z: Datas
  name: start
  func: |-

    return msg;
  outputs: 1
  timeout: 0
  noerr: 0
  initialize: ''
  finalize: ''
  libs: []
  x: 110
  'y': 60
  wires:
    - - ext-controller__read
      - ext-controller__write
      - scara-left__read
      - scara-left__write
      - scara-right__read
      - scara-right__write
      - virtual-modbus__read
      - virtual-modbus__write
- id: Datas_inject
  type: inject
  z: Datas
  name: ''
  props:
    - p: payload
    - p: topic
      vt: str
  repeat: ''
  crontab: ''
  once: false
  onceDelay: '3'
  topic: ''
  payload: ''
  payloadType: date
  x: 100
  'y': 160
  wires:
    - - data_center_start
- id: modbus-flex-getter__ext-controller
  type: modbus-flex-getter
  z: Datas
  name: getter_ext-controller
  showStatusActivities: false
  showErrors: false
  showWarnings: true
  logIOActivities: false
  server: ext-controller
  useIOFile: false
  ioFile: ''
  useIOForPayload: false
  emptyMsgOnFail: false
  keepMsgProperties: false
  delayOnStart: false
  startDelayTime: ''
  x: 450
  'y': 170
  wires:
    - - fun_receive__ext-controller
    - []
- id: ext-controller__read
  type: function
  z: Datas
  name: read_ext-controller
  func: >
    setTimeout(function(){ node.send({payload : {end:false,dev:'ext-controller',
    'fc':3, 'unitid': 1, 'address':  0 , 'quantity': 2 }}); 

    setTimeout(function(){ node.send({payload : {end:true,dev:'ext-controller',
    'fc':3, 'unitid': 1, 'address':  3 , 'quantity': 4 }}); 

    },80); 

    },80); 
  outputs: 1
  timeout: 0
  noerr: 0
  initialize: ''
  finalize: ''
  libs: []
  x: 250
  'y': 220
  wires:
    - - modbus-flex-getter__ext-controller
      - switch__ext-controller
- id: switch__ext-controller
  type: switch
  z: Datas
  name: ''
  property: payload.end
  propertyType: msg
  rules:
    - t: 'true'
  checkall: 'true'
  repair: false
  outputs: 1
  x: 450
  'y': 220
  wires:
    - - ext-controller__read
- id: fun_receive__ext-controller
  type: function
  z: Datas
  name: receive_ext-controller
  func: "let devices = global.get('devices'); \nlet device = devices['ext-controller']; \nlet monitor = device['monitor']; \nlet datas = global.get('datas'); \n\tlet vals = msg.payload;\t\t\t\t\t\t\t\n\tfor(let i=0;i<vals.length;i++){\t\t\t\t\t\t\t\n\t\tlet address = msg.modbusRequest.address + i;\t\t\t\t\t\t\n\t\tfor(let key in monitor){ \t\t\t\t\t\t\n\t\t\tlet point = monitor[key]; \t\t\t\t\t\n\t\t\tif( parseInt( point.address) == address){ \t\t\t\t\t\n\t\t\t\tpoint.value = msg.payload[i]; \t\t\t\t\n\t\t\t\tfor(let key2 in datas){ \t\t\t\t\n\t\t\t\t\tif(key2 == key){ \t\t\t\n\t\t\t\t\t\tdatas[key2] = point.value; \t\t\n\t\t\t\t\t\tbreak; \t\t\n\t\t\t\t\t} \t\t\t\n\t\t\t\t} \t\t\t\t\n\t\t\t\tbreak; \t\t\t\t\n\t\t\t} \t\t\t\t\t\n\t\t} \t\t\t\t\t\t\n\t}\t\t\t\t\t\t\t\n"
  outputs: 1
  timeout: 0
  noerr: 0
  initialize: ''
  finalize: ''
  libs: []
  x: 830
  'y': 220
  wires:
    - []
- id: modbus-flex-write__ext-controller
  type: modbus-flex-write
  z: Datas
  name: write_ext-controller
  showStatusActivities: false
  showErrors: false
  showWarnings: true
  server: ext-controller
  emptyMsgOnFail: false
  keepMsgProperties: false
  delayOnStart: false
  startDelayTime: ''
  x: 450
  'y': 70
  wires:
    - []
    - []
- id: switch_write__ext-controller
  type: switch
  z: Datas
  name: ''
  property: payload.end
  propertyType: msg
  rules:
    - t: 'true'
  checkall: 'true'
  repair: false
  outputs: 1
  x: 450
  'y': 120
  wires:
    - - ext-controller__write
- id: ext-controller__write
  type: function
  z: Datas
  name: write_ext-controller
  func: >
    setTimeout(function(){const datas = global.get('datas');const val =
    [datas['request']]; let devices = global.get('devices');
    devices['ext-controller'].monitor['request'].value = datas['request'];
     node.send({payload : {value:val,end:false,dev:'ext-controller', 'fc': 16, 'unitid': 1, 'address':  2 , 'quantity': 1 }}); 
    setTimeout(function(){const datas = global.get('datas');const val =
    [datas['tray_in_left'],datas['tray_out_left'],datas['tray_in_right'],datas['tray_out_right']];
    let devices = global.get('devices');
    devices['ext-controller'].monitor['tray_in_left'].value =
    datas['tray_in_left'];

    devices['ext-controller'].monitor['tray_out_left'].value =
    datas['tray_out_left'];

    devices['ext-controller'].monitor['tray_in_right'].value =
    datas['tray_in_right'];

    devices['ext-controller'].monitor['tray_out_right'].value =
    datas['tray_out_right'];
     node.send({payload : {value:val,end:true,dev:'ext-controller', 'fc': 16, 'unitid': 1, 'address':  7 , 'quantity': 4 }}); 
    },80); 

    },80); 
  outputs: 1
  timeout: 0
  noerr: 0
  initialize: ''
  finalize: ''
  libs: []
  x: 250
  'y': 120
  wires:
    - - modbus-flex-write__ext-controller
      - switch_write__ext-controller
- id: modbus-flex-getter__scara-left
  type: modbus-flex-getter
  z: Datas
  name: getter_scara-left
  showStatusActivities: false
  showErrors: false
  showWarnings: true
  logIOActivities: false
  server: scara-left
  useIOFile: false
  ioFile: ''
  useIOForPayload: false
  emptyMsgOnFail: false
  keepMsgProperties: false
  delayOnStart: false
  startDelayTime: ''
  x: 450
  'y': 390
  wires:
    - - fun_receive__scara-left
    - []
- id: scara-left__read
  type: function
  z: Datas
  name: read_scara-left
  func: >
    setTimeout(function(){ node.send({payload : {end:false,dev:'scara-left',
    'fc':3, 'unitid': 1, 'address':  5 , 'quantity': 2 }}); 

    setTimeout(function(){ node.send({payload : {end:true,dev:'scara-left',
    'fc':3, 'unitid': 1, 'address':  8 , 'quantity': 1 }}); 

    },80); 

    },80); 
  outputs: 1
  timeout: 0
  noerr: 0
  initialize: ''
  finalize: ''
  libs: []
  x: 250
  'y': 440
  wires:
    - - modbus-flex-getter__scara-left
      - switch__scara-left
- id: switch__scara-left
  type: switch
  z: Datas
  name: ''
  property: payload.end
  propertyType: msg
  rules:
    - t: 'true'
  checkall: 'true'
  repair: false
  outputs: 1
  x: 450
  'y': 440
  wires:
    - - scara-left__read
- id: fun_receive__scara-left
  type: function
  z: Datas
  name: receive_scara-left
  func: "let devices = global.get('devices'); \nlet device = devices['scara-left']; \nlet monitor = device['monitor']; \nlet datas = global.get('datas'); \n\tlet vals = msg.payload;\t\t\t\t\t\t\t\n\tfor(let i=0;i<vals.length;i++){\t\t\t\t\t\t\t\n\t\tlet address = msg.modbusRequest.address + i;\t\t\t\t\t\t\n\t\tfor(let key in monitor){ \t\t\t\t\t\t\n\t\t\tlet point = monitor[key]; \t\t\t\t\t\n\t\t\tif( parseInt( point.address) == address){ \t\t\t\t\t\n\t\t\t\tpoint.value = msg.payload[i]; \t\t\t\t\n\t\t\t\tfor(let key2 in datas){ \t\t\t\t\n\t\t\t\t\tif(key2 == key){ \t\t\t\n\t\t\t\t\t\tdatas[key2] = point.value; \t\t\n\t\t\t\t\t\tbreak; \t\t\n\t\t\t\t\t} \t\t\t\n\t\t\t\t} \t\t\t\t\n\t\t\t\tbreak; \t\t\t\t\n\t\t\t} \t\t\t\t\t\n\t\t} \t\t\t\t\t\t\n\t}\t\t\t\t\t\t\t\n"
  outputs: 1
  timeout: 0
  noerr: 0
  initialize: ''
  finalize: ''
  libs: []
  x: 830
  'y': 440
  wires:
    - []
- id: modbus-flex-write__scara-left
  type: modbus-flex-write
  z: Datas
  name: write_scara-left
  showStatusActivities: false
  showErrors: false
  showWarnings: true
  server: scara-left
  emptyMsgOnFail: false
  keepMsgProperties: false
  delayOnStart: false
  startDelayTime: ''
  x: 450
  'y': 290
  wires:
    - []
    - []
- id: switch_write__scara-left
  type: switch
  z: Datas
  name: ''
  property: payload.end
  propertyType: msg
  rules:
    - t: 'true'
  checkall: 'true'
  repair: false
  outputs: 1
  x: 450
  'y': 340
  wires:
    - - scara-left__write
- id: scara-left__write
  type: function
  z: Datas
  name: write_scara-left
  func: >
    setTimeout(function(){const datas = global.get('datas');const val =
    [datas['idx_in_left'],datas['idx_out_left'],datas['material_left'],datas['trash_left']];
    let devices = global.get('devices');
    devices['scara-left'].monitor['idx_in_left'].value = datas['idx_in_left'];

    devices['scara-left'].monitor['idx_out_left'].value = datas['idx_out_left'];

    devices['scara-left'].monitor['material_left'].value =
    datas['material_left'];

    devices['scara-left'].monitor['trash_left'].value = datas['trash_left'];
     node.send({payload : {value:val,end:false,dev:'scara-left', 'fc': 16, 'unitid': 1, 'address':  1 , 'quantity': 4 }}); 
    setTimeout(function(){const datas = global.get('datas');const val =
    [datas['request_left']]; let devices = global.get('devices');
    devices['scara-left'].monitor['request_left'].value = datas['request_left'];
     node.send({payload : {value:val,end:true,dev:'scara-left', 'fc': 16, 'unitid': 1, 'address':  7 , 'quantity': 1 }}); 
    },80); 

    },80); 
  outputs: 1
  timeout: 0
  noerr: 0
  initialize: ''
  finalize: ''
  libs: []
  x: 250
  'y': 340
  wires:
    - - modbus-flex-write__scara-left
      - switch_write__scara-left
- id: modbus-flex-getter__scara-right
  type: modbus-flex-getter
  z: Datas
  name: getter_scara-right
  showStatusActivities: false
  showErrors: false
  showWarnings: true
  logIOActivities: false
  server: scara-right
  useIOFile: false
  ioFile: ''
  useIOForPayload: false
  emptyMsgOnFail: false
  keepMsgProperties: false
  delayOnStart: false
  startDelayTime: ''
  x: 450
  'y': 610
  wires:
    - - fun_receive__scara-right
    - []
- id: scara-right__read
  type: function
  z: Datas
  name: read_scara-right
  func: >
    setTimeout(function(){ node.send({payload : {end:false,dev:'scara-right',
    'fc':3, 'unitid': 1, 'address':  5 , 'quantity': 2 }}); 

    setTimeout(function(){ node.send({payload : {end:true,dev:'scara-right',
    'fc':3, 'unitid': 1, 'address':  8 , 'quantity': 1 }}); 

    },80); 

    },80); 
  outputs: 1
  timeout: 0
  noerr: 0
  initialize: ''
  finalize: ''
  libs: []
  x: 250
  'y': 660
  wires:
    - - modbus-flex-getter__scara-right
      - switch__scara-right
- id: switch__scara-right
  type: switch
  z: Datas
  name: ''
  property: payload.end
  propertyType: msg
  rules:
    - t: 'true'
  checkall: 'true'
  repair: false
  outputs: 1
  x: 450
  'y': 660
  wires:
    - - scara-right__read
- id: fun_receive__scara-right
  type: function
  z: Datas
  name: receive_scara-right
  func: "let devices = global.get('devices'); \nlet device = devices['scara-right']; \nlet monitor = device['monitor']; \nlet datas = global.get('datas'); \n\tlet vals = msg.payload;\t\t\t\t\t\t\t\n\tfor(let i=0;i<vals.length;i++){\t\t\t\t\t\t\t\n\t\tlet address = msg.modbusRequest.address + i;\t\t\t\t\t\t\n\t\tfor(let key in monitor){ \t\t\t\t\t\t\n\t\t\tlet point = monitor[key]; \t\t\t\t\t\n\t\t\tif( parseInt( point.address) == address){ \t\t\t\t\t\n\t\t\t\tpoint.value = msg.payload[i]; \t\t\t\t\n\t\t\t\tfor(let key2 in datas){ \t\t\t\t\n\t\t\t\t\tif(key2 == key){ \t\t\t\n\t\t\t\t\t\tdatas[key2] = point.value; \t\t\n\t\t\t\t\t\tbreak; \t\t\n\t\t\t\t\t} \t\t\t\n\t\t\t\t} \t\t\t\t\n\t\t\t\tbreak; \t\t\t\t\n\t\t\t} \t\t\t\t\t\n\t\t} \t\t\t\t\t\t\n\t}\t\t\t\t\t\t\t\n"
  outputs: 1
  timeout: 0
  noerr: 0
  initialize: ''
  finalize: ''
  libs: []
  x: 830
  'y': 660
  wires:
    - []
- id: modbus-flex-write__scara-right
  type: modbus-flex-write
  z: Datas
  name: write_scara-right
  showStatusActivities: false
  showErrors: false
  showWarnings: true
  server: scara-right
  emptyMsgOnFail: false
  keepMsgProperties: false
  delayOnStart: false
  startDelayTime: ''
  x: 450
  'y': 510
  wires:
    - []
    - []
- id: switch_write__scara-right
  type: switch
  z: Datas
  name: ''
  property: payload.end
  propertyType: msg
  rules:
    - t: 'true'
  checkall: 'true'
  repair: false
  outputs: 1
  x: 450
  'y': 560
  wires:
    - - scara-right__write
- id: scara-right__write
  type: function
  z: Datas
  name: write_scara-right
  func: >
    setTimeout(function(){const datas = global.get('datas');const val =
    [datas['idx_in_right'],datas['idx_out_right'],datas['material_right'],datas['trash_right']];
    let devices = global.get('devices');
    devices['scara-right'].monitor['idx_in_right'].value =
    datas['idx_in_right'];

    devices['scara-right'].monitor['idx_out_right'].value =
    datas['idx_out_right'];

    devices['scara-right'].monitor['material_right'].value =
    datas['material_right'];

    devices['scara-right'].monitor['trash_right'].value = datas['trash_right'];
     node.send({payload : {value:val,end:false,dev:'scara-right', 'fc': 16, 'unitid': 1, 'address':  1 , 'quantity': 4 }}); 
    setTimeout(function(){const datas = global.get('datas');const val =
    [datas['request_right']]; let devices = global.get('devices');
    devices['scara-right'].monitor['request_right'].value =
    datas['request_right'];
     node.send({payload : {value:val,end:true,dev:'scara-right', 'fc': 16, 'unitid': 1, 'address':  7 , 'quantity': 1 }}); 
    },80); 

    },80); 
  outputs: 1
  timeout: 0
  noerr: 0
  initialize: ''
  finalize: ''
  libs: []
  x: 250
  'y': 560
  wires:
    - - modbus-flex-write__scara-right
      - switch_write__scara-right
- id: modbus-flex-getter__virtual-modbus
  type: modbus-flex-getter
  z: Datas
  name: getter_virtual-modbus
  showStatusActivities: false
  showErrors: false
  showWarnings: true
  logIOActivities: false
  server: virtual-modbus
  useIOFile: false
  ioFile: ''
  useIOForPayload: false
  emptyMsgOnFail: false
  keepMsgProperties: false
  delayOnStart: false
  startDelayTime: ''
  x: 450
  'y': 830
  wires:
    - - fun_receive__virtual-modbus
    - []
- id: virtual-modbus__read
  type: function
  z: Datas
  name: read_virtual-modbus
  func: ''
  outputs: 1
  timeout: 0
  noerr: 0
  initialize: ''
  finalize: ''
  libs: []
  x: 250
  'y': 880
  wires:
    - - modbus-flex-getter__virtual-modbus
      - switch__virtual-modbus
- id: switch__virtual-modbus
  type: switch
  z: Datas
  name: ''
  property: payload.end
  propertyType: msg
  rules:
    - t: 'true'
  checkall: 'true'
  repair: false
  outputs: 1
  x: 450
  'y': 880
  wires:
    - - virtual-modbus__read
- id: fun_receive__virtual-modbus
  type: function
  z: Datas
  name: receive_virtual-modbus
  func: "let devices = global.get('devices'); \nlet device = devices['virtual-modbus']; \nlet monitor = device['monitor']; \nlet datas = global.get('datas'); \n\tlet vals = msg.payload;\t\t\t\t\t\t\t\n\tfor(let i=0;i<vals.length;i++){\t\t\t\t\t\t\t\n\t\tlet address = msg.modbusRequest.address + i;\t\t\t\t\t\t\n\t\tfor(let key in monitor){ \t\t\t\t\t\t\n\t\t\tlet point = monitor[key]; \t\t\t\t\t\n\t\t\tif( parseInt( point.address) == address){ \t\t\t\t\t\n\t\t\t\tpoint.value = msg.payload[i]; \t\t\t\t\n\t\t\t\tfor(let key2 in datas){ \t\t\t\t\n\t\t\t\t\tif(key2 == key){ \t\t\t\n\t\t\t\t\t\tdatas[key2] = point.value; \t\t\n\t\t\t\t\t\tbreak; \t\t\n\t\t\t\t\t} \t\t\t\n\t\t\t\t} \t\t\t\t\n\t\t\t\tbreak; \t\t\t\t\n\t\t\t} \t\t\t\t\t\n\t\t} \t\t\t\t\t\t\n\t}\t\t\t\t\t\t\t\n"
  outputs: 1
  timeout: 0
  noerr: 0
  initialize: ''
  finalize: ''
  libs: []
  x: 830
  'y': 880
  wires:
    - []
- id: modbus-flex-write__virtual-modbus
  type: modbus-flex-write
  z: Datas
  name: write_virtual-modbus
  showStatusActivities: false
  showErrors: false
  showWarnings: true
  server: virtual-modbus
  emptyMsgOnFail: false
  keepMsgProperties: false
  delayOnStart: false
  startDelayTime: ''
  x: 450
  'y': 730
  wires:
    - []
    - []
- id: switch_write__virtual-modbus
  type: switch
  z: Datas
  name: ''
  property: payload.end
  propertyType: msg
  rules:
    - t: 'true'
  checkall: 'true'
  repair: false
  outputs: 1
  x: 450
  'y': 780
  wires:
    - - virtual-modbus__write
- id: virtual-modbus__write
  type: function
  z: Datas
  name: write_virtual-modbus
  func: ''
  outputs: 1
  timeout: 0
  noerr: 0
  initialize: ''
  finalize: ''
  libs: []
  x: 250
  'y': 780
  wires:
    - - modbus-flex-write__virtual-modbus
      - switch_write__virtual-modbus
